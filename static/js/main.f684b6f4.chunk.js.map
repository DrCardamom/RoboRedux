{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","actions.js","constants.js","reducers.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","email","id","className","alt","src","CardList","robots","CardArray","map","user","i","key","SearchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","App","this","onRequestRobots","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","startsWith","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","res","json","data","catch","initialState_searchRobots","initialState_requestRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.f684b6f4.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n"," import React from 'react';\n\n const Card = ({name, email, id}) => {\n\n     return (\n         <div className=\"tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n             <img alt='robot' src={`https://robohash.org/${id}?size=200x200`}></img>\n             <div>\n                 <h2>{name}</h2>\n                 <p>{email}</p>\n             </div>\n         </div>\n     )\n }\n\n export default Card;\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n\n    // if(true) {\n    //     throw new Error('NOOOOOOO');\n    // };\n\n    const CardArray = robots.map((user, i) => {\n        return (\n            <Card \n                  key={i}\n                  id={robots[i].id} \n                  name={robots[i].name} \n                  email={robots[i].email} \n            />\n        ) \n    });\n\n    return (\n        <div>\n            {CardArray}\n        </div>\n\n    );\n}\n\nexport default CardList;","import React from 'react';\n\nconst SearchBox = ({searchChange}) => {\n    return  (\n        <div className='pa2'>\n             <input    \n             className='pa3 ba b--green bg-lightest-blue'\n             type=\"search\"\n             placeholder='Search robots'\n             onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default SearchBox;","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style=\n        {{overflow: 'scroll', \n        border:'5px solid black',\n        height:'800px'\n        }}\n        >\n          {props.children}\n        </div>\n    );\n}\n\nexport default Scroll;\n","import React, { Component } from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport './App.css';\n\nimport { setSearchField, requestRobots } from '../actions';\nimport { connect } from 'react-redux';\n\nconst mapStateToProps = state => {\n  return {\n    searchField: state.searchRobots.searchField,\n    robots: state.requestRobots.robots,\n    isPending: state.requestRobots.isPending,\n    error: state.requestRobots.error\n  }\n} \n\n// Dispatch: what triggers an action\nconst mapDispatchToProps = dispatch => {\n  return {\n    // function onSearchChange \"dispatches\" what setSearchField returns, which is type and payload\n    // This is same as \"function onSearchChange(event) {dispatch(setSearchField(event.target.value)}\"\n    onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n    onRequestRobots: () => dispatch(requestRobots())\n  }\n}\n\nclass App extends Component {\n  componentDidMount() {   \n    this.props.onRequestRobots();\n  } \n\n  render() {\n    const { searchField, onSearchChange, robots, isPending } = this.props;\n\n    const filteredRobots = robots.filter(robot =>{\n      return robot.name.toLowerCase().startsWith(searchField.toLowerCase());\n    });\n\n    return isPending ?\n      <h1>Loading</h1> :\n      (\n        <div className='tc'>\n          <h1 className='f1'>RoboRedux</h1>\n          <SearchBox searchChange={onSearchChange} />\n          <Scroll>\n            <CardList robots={filteredRobots} />\n          </Scroll>\n        </div>\n      );\n  }\n}\n\n// mapStateToProps - subscribe any state changes to the Redux store\n// mapDispatchToProps - subscribe any new actions\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { CHANGE_SEARCH_FIELD,\n   REQUEST_ROBOTS_PENDING,\n   REQUEST_ROBOTS_SUCCESS,\n   REQUEST_ROBOTS_FAILED\n} from './constants.js';\n\n// it just receives text and returns an object with 2 elements, \n// type(What happened) and payload(an input text)\nexport const setSearchField = (text) => ({\n   // Description of user action\n   type: CHANGE_SEARCH_FIELD,\n   // User input\n   payload: text\n});\n\nexport const requestRobots = () => (dispatch) => {\n   dispatch({type: REQUEST_ROBOTS_PENDING});\n   fetch('https://jsonplaceholder.typicode.com/users')\n   .then(res => res.json())\n   .then(data => dispatch({type: REQUEST_ROBOTS_SUCCESS, payload: data}))\n   .catch(error => dispatch({type: REQUEST_ROBOTS_FAILED, payload: error}))\n}","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD';\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING';\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS';\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED';","import { CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED\n } from './constants.js';\n \n const initialState_searchRobots = {\n    searchField: ''\n }\n \n export const searchRobots = (state=initialState_searchRobots, action={}) => {\n    switch(action.type) {\n       case CHANGE_SEARCH_FIELD: \n          return Object.assign({}, state, {searchField: action.payload})\n       default: \n          return state;\n    }\n }\n \n const initialState_requestRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n }\n \n export const requestRobots = (state=initialState_requestRobots, action={}) => {\n    switch(action.type) {\n       case REQUEST_ROBOTS_PENDING:\n          return Object.assign({}, state, {isPending: true})\n       case REQUEST_ROBOTS_SUCCESS:\n          return Object.assign({}, state, {isPending: false, robots: action.payload})\n       case REQUEST_ROBOTS_FAILED:\n          return Object.assign({}, state, {isPending: false, error: action.payload})\n       default:\n          return state;\n    }\n }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './containers/App';\nimport { searchRobots, requestRobots } from './reducers';\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots, requestRobots});\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware, logger));\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}